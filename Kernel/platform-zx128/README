An FUZIX target for ZX Spectrum 128.

0000-3FFF	Fixed BASIC ROM (including ROM font)
		(Strictly speaking this is a choice of ROMs and magic
		 overlaying hardware ROMs like the interface 1). We need the
		48K one so we can use the font and the 0x3900 hack

		(Some clones and add in cards can overlay this with RAM or
		banked RAM of their own)

4000-7FFF	Kernel data, common read/write space, constants, common read
		only, plenty of space
8000-BFFF	_DISCARD area - blown away when we exec init
		followed by the initializing copies of common etc that are
		copied down post boot
C000-FFFF
	0:	Kernel CODE (full)
	1:	Kernel CODE2 (full)
	2:	Mapped at 0x8000-0xBFFF (exchanged with user process buffer)
	3:	User process
	4:	User process
	5:	Mapped at 0x4000-0x7FFF (Kernel data/common)
	6:	User process (holds the 0x8000-BFFF of the other task)
	7:	CODE3, Display + Video (plenty of room)

Which gives us the ability to run 16K and 32K processes although we'd need
to do bank exchanges to keep 2 x 32K in memory at once (one in 2/3 one in
4/7 and doing a block exchange of the memory). From the TRS80 this seems
to be worth the extra effort.

Making the base kernel use the low ROM space is surprisingly pointless. We
could just about squash it in with screen at 0x4000 and claim back page 7.

Moving the entire kernel into a banked cartridge gets us more banks for user
processes but leaves us with common at 0x4000 so its tight below 0x8000

The other half of the problem on the ZX Spectrum128 is the fact binaries
must be linked with a different base (0xC000 for 16K, 0x8000 for 32K) so
we need to sort out relocatables. Not only that but our RST based syscall
vector is of course buried in ZX Spectrum ROM.

Big part of the code was taken from z80pack and msx1 ports.

TODO:

Hook swap
Swap over IDE

Set vectors for syscalls somewhere safe and common (can't use the normal RST
ones). Need a reloc hack to pick syscall method ??

Note:
The Timx is different. Memory is 3 banks of 64K. The main bank is laid
out like the Spectrum 48K but with the screen at 0x4000 (or for 80 col mode
most of 0x4000-0x8000). Each 8K can come from either main memory or an
external bank (EX-ROM or DOCK). Dock and EX_ROM pages cannot be mapped at
the same time. Not clear how well it can be supported

Kernel in base 0x4000->0xFFFF (minus one screen), user in dock perhaps ?
Would be tight for kernel but give 2 x 32K apps if supported relocations.

Might need OS partly in cartridge ROM to make it work (certainly for 80col)


Other questions:

Spectrum 48K using DivIDE or Microdrive and Interface 2 banked cartridge.
In this case the kernel ends up in the low 16K banked with video at 0x4000.
That would make data/common very tight indeed.

Spectrum 128K with Interface 2 banked cartridges is similar to base ZX128
but frees more pages for user apps.

Spectrum 128K with the ZXMMC etc - in these cases we have 16K banked RAM in
low memory as well (in the 128K) as high.  For the 128K it offers the option to
bank the kernel high along with the display, and run user processes in low
memory. As we can put the kernel data in a low bank it also means we can
put a small common at the top of each bank and run with nearly 64K available
to each user process (but with the copying costs on switches)

Spectrum 48K with ZXMMC etc. In this case the screen being stuck at 0x4000
rather limits the options beyond a ZX128 like set up but with kernel low
just as with cartridge.

Scorpion can have more RAM (256K) and can also map one of the pages low but
not bank it. This doesn't seem to buy us much except for more copyable banks
before we hit disk. Pentagon is much the same.
