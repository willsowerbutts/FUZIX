Development subtree for the v68 virtual platform and general 68000
bootstrap work.

This version of the code implements a simple 68K machine and needs about 128K
of RAM to be useful. Once you get past 256K or so including the kernel this
single process in RAM model starts to make a lot less sense.

If your board can protect low memory from supervisor mode accesses then it will
help. The emulator supports protection of the low 64K - as the N8VEM board can
do. That is sufficient to run with almost full kernel protection. To get full
protection would require MMIO space was supervisor only.

Current status:

At the moment we dump  userspace apps at 0x20000-0x2FFFF which is a quick
getting started hack to debug all the user issues. On a real platform you'd want
to start user space straight after the kernel or if need be just above the
protection boundary.

TODO:
- bourne shell crashes on exit with MMU enforcement with an access to 0. This
  appears to be a bug in the v7 version of sh in 32bit. It would make more
  sense to use the heritage sh which is sys5 ish and a bit bigger.
- signal handling needs further testing (disabled on IRQ path currently)
- copy exception/trap frames onto user stack along with trap identifiers
  so we can support stuff like CP/M 68K and TOS emulators.
- pre-emption needs more testing (also disabled on IRQ path currently)
- support multiple IRQ sources and IRQ priority nesting when appropriate
- enable IRQ during swap on context switch
- optimize swap out/in. With bigger amounts of RAM we want to be smarter
  where it doesn't matter on 8bit.

Possible optimizations:

- when we swap in or out just zero the area between bss and sp rather than
  read or write from disk media. Once you go over about 64K of userspace (128K
  RAM on the board) this makes a lot of sense.
- vfork style functionality for faster fork/exec when we support multiple
process in memory models, and whether we can do resident/shared code type stuff.
The Amiga style re-entrant code might be a good model.


The build environment is gcc 6.2.0 configured with

../gcc-6.2.0/configure --target=m68k-uclinux --prefix=/opt/gcc-fuzix/ \
--enable-multilib --disable-libssp --disable-shared --disable-threads \
--disable-libmudflap --disable-libgomp --with-system-zlib \
--enable-languages=c --with-cpu=68000 --with-arch=m68k

and the gcc needs to be patched with the following tiny change to stop it
creating a broken libgcc for 68000.

--- ./libgcc/config/m68k/lb1sf68.S~	2016-01-04 14:30:50.000000000 +0000
+++ ./libgcc/config/m68k/lb1sf68.S	2016-10-20 20:27:33.232784120 +0100
@@ -102,7 +102,7 @@
 	/* Non PIC (absolute/relocatable) versions */
 
 	.macro PICCALL addr
-	jbsr	\addr
+	jsr	\addr
 	.endm
 
 	.macro PICJUMP addr




The v68 scripts are set up for a 20MB IDE disk with the partitions as
follows

Disk hd0: 20 MiB, 20971520 bytes, 40960 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xa874a478

Device Boot Start   End Sectors Size Id Type
hd0p1        2048 10239    8192   4M 83 Linux
hd0p2       10240 40959   30720  15M 83 Linux


Do ./makedisk 3 disk.img

That will produce a disk with a 1K emulator header on it

fdisk the disk (offset 1K in)
set up the partitions
w
q

To make the disk image use the filesystem tool in standalone and build it
with 30720 blocks.

Then run makeboot, install-fuzix and install-fs to create the image, boot
and hit b, then on kernel load 2 for the root fs



