See platform-v68

This is a test tree for a configuration using banked memory (N8VEM 680x0
style). In this configuration we place the kernel in the low 64K of the
emulator space (protected), and we put the applications and the udata stash
in each bank. This allows us to keep the kernel protected. We'd have far
faster task switch if we kept udata banks all in the kernel and moved a5
(plus did fork differently) but would then lose the 64K protection.

We simulate 4 banks of 128K plus swap.

The current model this uses only makes sense for small memory sizes. If you
have lots of memory then we need a much smarter swap algorithm that does real
allocation and we also need to avoid copying empty zones we can zero.

TODO

- Make bankfixed support only writing out used areas of memory

- Make fork copy only the needed bits

Look at a bankfixed/bankfixed32 split - put the smarts in bankfixed32 and then
look at a proper swap allocator so we don't waste tons of memory with big
banks.

- Write optimised udata copier ? (movem based and reverse ?)

- Save restore bank on interrupt entry/exit
