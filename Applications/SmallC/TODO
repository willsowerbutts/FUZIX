- Parse assignment to local variables
	auto x = 4; etc
- Assignment to global pointers (generate

foo: defw L1234
L1234: data ..
)

- tokenize and parse types properly so we can add real types to the compiler
  (even if we don't yet do anything remotely valid for type promotions)
- Write some copt rules to stop the output sucking so much
- Steal the rst tricks done by BDS C
- Can we split the preprocessor optionally
- Work out what is needed for stack frame based Z80 code

- Clean up optimizier rules now we have ;end
- Flag void v non void to optimizer (elimination of trailing loads)
- How to do tail load elimination but avoid breaking the way it relies
  upon that for returns ? - is the jump $1 reliable for that ? (take care if
  we eliminate the jump $1 for a label)
- Proper constant typing
- Type promotion

We need a post processor that does

1. Turn error number/lines into error reporting (so we can avoid the strings
   in the compiler)
2. Parses a record for each definition/use of a function checking the
   prototype and doing mismatch warnings and use before defines

In particular we need to encode prototypes very tightly in main memory so
can't afford to do all the work in the cc first pass but we can write the
full thing out and internally pack a function as

[type|nargs][name][argbits]

and pack each argument including return as

0000	char
0001	short/int
0011	long int
0100	unsigned char
0101	unsigned short/int
0110	float/double
0111	unsigned long
1000	ptr (to anytbing)
1110	...(with implied endmark) 
1111	endmark

thus representing each possible type in 4 bits with enough information for
casting and promotion.

This lets us store functions as

name[typelist]

where the first typelist is the return. foo() is foo(...) and foo(void) is
zero arguments

Macro ops for bytecode form

load r1 (fprel)			; with pre/post inc dec
store r1 (fprel)		; ditto

And ditto with 'and indirect' or bytes (signed and unsigned)

ie so we can generate as a 2 byte op

	load r1 [(2+fp)++]


Z80 registers

BC - providing we tweak the varargs bits (int)
IY - pointer
IX - pointer (maybe)

RST ops ?

- stack indirections
- complex ops (RSTm aa ll  RSTn aa ll hh)
	- pre/post inc load/stores with or without indirection
	- stack shifts


Insane compression idea

Generate code as tags plus expression trees
Native code them in order to get a size / perf cost
At link time re-scan *all* the trees and identify the duplicated subtrees
if they exceed a certain cost then call them as helper code

Turn that program into native code (or final bytecode)
